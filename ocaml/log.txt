# #use "sde2.ml";;
val first_duplicate : int list -> int = <fun>
val sumOfTwo : int list * int list * int -> bool = <fun>
val frequency : 'a list -> ('a * int) list = <fun>
val take : int * 'a list -> 'a list = <fun>
val powerset : 'a list -> 'a list list = <fun>
# first_duplicate [1;2;3;4;5;6;7;4;5;8;9];;
- : int = 4
# first_duplicate [1;2;3;4;5;6;7;8;5;2;9];;
- : int = 2
# first_duplicate [1;2;3;4;5;6;7;8;9;10];;
- : int = -10000
# sumOfTwo([1;2;3],[10;20;30;40],42);;
- : bool = true
# sumOfTwo([1;2;3],[10;20;30;40],40);;
- : bool = false
# sumOfTwo([1;2;3],[10;20;30;40],41);;
- : bool = true
# sumOfTwo([1;2;3],[10;20;30;40],43);;
- : bool = true
# sumOfTwo([1;2;3],[10;20;30;40],44);;
- : bool = false
# sumOfTwo([1;2;3],[10;20;30;40],11);;
- : bool = true
# sumOfTwo([1;2;3],[10;20;30;40],15);;
- : bool = false
# frequency ["a"; "a"; "a"; "b"; "b"; "c"; "c"; "c"; "c"];;
- : (string * int) list = [("a", 3); ("b", 2); ("c", 4)]
# frequency [1; 1; 2; 2; 2; 3; 4; 4];;
- : (int * int) list = [(1, 2); (2, 3); (3, 1); (4, 2)]
# take (2, [1;2;3;4]);;
- : int list = [1; 2]
# take (15, [1;2;3;4]);;
- : int list = [1; 2; 3; 4]
# take (-1, [1;2;3;4]);;
- : int list = []
# powerset [1;2;3];;
- : int list list = [[]; [1]; [2]; [3]; [1; 2]; [1; 3]; [2; 3]; [1; 2; 3]]
# powerset [1;2];;
- : int list list = [[]; [1]; [2]; [1; 2]]
# powerset [1;2;3;4];;
- : int list list =
[[]; [1]; [2]; [3]; [4]; [1; 2]; [1; 3]; [1; 4]; [2; 3]; [2; 4]; [3; 4];
 [1; 2; 3]; [1; 2; 4]; [1; 3; 4]; [2; 3; 4]; [1; 2; 3; 4]]